/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DlvPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_util = require("util");
var path = __toESM(require("path"));
var os = __toESM(require("os"));
var import_fs = require("fs");
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var execAsync = (0, import_util.promisify)(import_child_process.exec);
var DEFAULT_SETTINGS = {
  dlvPath: "",
  customExtensions: "asp",
  // può essere una lista separata da virgola
  showAllModels: false,
  hideFacts: false,
  cacheResults: true
};
var DlvPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DlvSettingTab(this.app, this));
    console.log("DLV Plugin caricato");
    this.registerMarkdownPostProcessor(
      (element, _ctx) => {
        element.querySelectorAll("pre code").forEach((codeEl) => {
          var _a;
          const langClass = Array.from(codeEl.classList).find(
            (cls) => cls.startsWith("language-")
          );
          if (!langClass)
            return;
          const lang = langClass.replace("language-", "").toLowerCase();
          const exts = this.settings.customExtensions.split(",").map((x) => x.trim().toLowerCase());
          if (!exts.some((e) => lang === e || lang.startsWith(e + ".")))
            return;
          const wrapper = document.createElement("div");
          wrapper.className = "dlv-wrapper";
          wrapper.style.border = "1px solid var(--background-modifier-border)";
          wrapper.style.margin = "10px 0";
          wrapper.style.padding = "5px";
          const header = document.createElement("div");
          header.className = "dlv-header";
          header.style.display = "flex";
          header.style.alignItems = "center";
          header.style.justifyContent = "space-between";
          header.style.marginBottom = "5px";
          const langLabel = document.createElement("span");
          langLabel.textContent = lang.toUpperCase();
          langLabel.style.fontWeight = "bold";
          header.appendChild(langLabel);
          const runBtn = document.createElement("button");
          runBtn.textContent = "Run with DLV";
          runBtn.className = "dlv-run-button";
          header.appendChild(runBtn);
          const divider = document.createElement("hr");
          divider.className = "dlv-divider";
          const outputWrapper = document.createElement("div");
          outputWrapper.className = "dlv-output-wrapper";
          outputWrapper.style.position = "relative";
          outputWrapper.style.marginTop = "5px";
          const outputPre = document.createElement("pre");
          outputPre.className = "dlv-output";
          outputPre.style.outline = "1px solid var(--interactive-accent)";
          outputPre.style.padding = "5px";
          outputPre.style.whiteSpace = "pre-wrap";
          outputPre.style.minHeight = "50px";
          outputWrapper.appendChild(outputPre);
          const copyBtn = document.createElement("button");
          copyBtn.className = "dlv-copy-output-btn";
          copyBtn.textContent = "Copy Output";
          copyBtn.style.position = "absolute";
          copyBtn.style.top = "5px";
          copyBtn.style.right = "5px";
          outputWrapper.appendChild(copyBtn);
          wrapper.appendChild(header);
          const originalPre = codeEl.parentElement;
          if (!originalPre)
            return;
          wrapper.appendChild(originalPre.cloneNode(true));
          wrapper.appendChild(divider);
          wrapper.appendChild(outputWrapper);
          (_a = originalPre.parentElement) == null ? void 0 : _a.replaceChild(wrapper, originalPre);
          runBtn.addEventListener("click", async () => {
            runBtn.disabled = true;
            new import_obsidian.Notice("Running DLV on code block...", 1500);
            const codeContent = codeEl.textContent;
            if (!codeContent) {
              new import_obsidian.Notice("Nessun codice da eseguire.");
              runBtn.disabled = false;
              return;
            }
            try {
              const output = await this.runDlvFromContent(lang, codeContent);
              outputPre.innerText = output;
            } catch (err) {
              console.error("DLV Error:", err);
              new import_obsidian.Notice(`DLV Error: ${err.message}`, 5e3);
            } finally {
              runBtn.disabled = false;
            }
          });
          copyBtn.addEventListener("click", async () => {
            try {
              await navigator.clipboard.writeText(outputPre.innerText);
              new import_obsidian.Notice("Output copiato!");
            } catch (err) {
              new import_obsidian.Notice(`Errore copia output: ${err.message}`, 5e3);
            }
          });
        });
      }
    );
    this.registerEditorExtension(this.getEditorDecoration());
  }
  /**
   * Funzione che esegue DLV sul contenuto dato e ritorna la stringa di output.
   * In questa implementazione il contenuto viene scritto in un file temporaneo.
   */
  async runDlvFromContent(lang, codeContent) {
    if (!this.settings.dlvPath) {
      throw new Error("DLV path not configured!");
    }
    const tmpDir = os.tmpdir();
    const tmpFile = path.join(tmpDir, `dlv-temp-${Date.now()}.${lang}`);
    await import_fs.promises.writeFile(tmpFile, codeContent, "utf8");
    const argsArr = [tmpFile];
    if (this.settings.showAllModels) {
      argsArr.push("-n", "0");
    }
    if (this.settings.hideFacts) {
      argsArr.push("--no-facts");
    }
    const cmd = `"${this.settings.dlvPath}" ${argsArr.map((arg) => `"${arg}"`).join(" ")}`;
    const execOptions = {
      shell: process.platform === "win32" ? "cmd.exe" : void 0
    };
    const { stdout, stderr } = await execAsync(cmd, execOptions);
    if (stderr) {
      throw new Error(stderr);
    }
    await import_fs.promises.unlink(tmpFile);
    return stdout;
  }
  /**
   * Esempio semplificato di editor decoration per la modalità Edit:
   * Aggiunge un widget header (con tasto Run) sopra ogni code fence che corrisponde alle estensioni.
   */
  getEditorDecoration() {
    const plugin = this;
    return import_view.EditorView.decorations.compute(["doc"], (state) => {
      const builder = new import_state.RangeSetBuilder();
      const docText = state.doc.toString();
      const regex = /^```(\S+)/gm;
      let match;
      while ((match = regex.exec(docText)) !== null) {
        const lang = match[1].toLowerCase();
        const exts = this.settings.customExtensions.split(",").map((x) => x.trim().toLowerCase());
        if (!exts.some((e) => lang === e || lang.startsWith(e + ".")))
          continue;
        const pos = state.doc.lineAt(match.index).from;
        builder.add(
          pos,
          pos,
          import_view.Decoration.widget({
            widget: new class extends import_view.WidgetType {
              toDOM() {
                const container = document.createElement("div");
                container.style.margin = "10px 0";
                const header = document.createElement("div");
                header.style.display = "flex";
                header.style.justifyContent = "space-between";
                header.style.padding = "5px";
                header.style.background = "var(--background-secondary)";
                header.style.border = "1px solid var(--background-modifier-border)";
                const langLabel = document.createElement("span");
                langLabel.textContent = lang.toUpperCase();
                langLabel.style.fontWeight = "bold";
                header.appendChild(langLabel);
                const runBtn = document.createElement("button");
                runBtn.textContent = "Run with DLV";
                runBtn.style.cursor = "pointer";
                header.appendChild(runBtn);
                const outputWrapper = document.createElement("div");
                outputWrapper.style.marginTop = "5px";
                outputWrapper.style.position = "relative";
                const outputPre = document.createElement("pre");
                outputPre.className = "dlv-output-edit";
                outputPre.style.padding = "5px";
                outputPre.style.border = "1px solid var(--interactive-accent)";
                outputPre.style.minHeight = "50px";
                const copyBtn = document.createElement("button");
                copyBtn.textContent = "Copy Output";
                copyBtn.style.position = "absolute";
                copyBtn.style.top = "5px";
                copyBtn.style.right = "5px";
                copyBtn.style.display = "none";
                outputWrapper.appendChild(outputPre);
                outputWrapper.appendChild(copyBtn);
                container.appendChild(header);
                container.appendChild(outputWrapper);
                runBtn.onclick = async () => {
                  const codeRegex = new RegExp(`\`\`\`\\s*${lang}\\s*([\\s\\S]*?)\\\`\`\``, "m");
                  const codeMatch = docText.match(codeRegex);
                  if (!codeMatch)
                    return;
                  try {
                    runBtn.disabled = true;
                    const output = await plugin.runDlvFromContent(lang, codeMatch[1].trim());
                    outputPre.textContent = output;
                    copyBtn.style.display = "block";
                  } catch (err) {
                    outputPre.textContent = `Error: ${err.message}`;
                  } finally {
                    runBtn.disabled = false;
                  }
                };
                copyBtn.onclick = async () => {
                  await navigator.clipboard.writeText(outputPre.textContent || "");
                  new import_obsidian.Notice("Output copiato!");
                };
                return container;
              }
            }(),
            side: 1
            // Posiziona dopo il codeblock
          })
        );
      }
      return builder.finish();
    });
  }
  async loadSettings() {
    const data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DlvSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "DLV Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("DLV Executable Path").setDesc("Percorso assoluto a DLV.exe").addText(
      (text) => text.setPlaceholder("C:\\path\\to\\dlv.exe").setValue(this.plugin.settings.dlvPath).onChange(async (value) => {
        this.plugin.settings.dlvPath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("File Extensions (for code blocks)").setDesc("Elenco separato da virgola dei linguaggi da riconoscere (es. asp, asp.net, prolog)").addText(
      (text) => text.setPlaceholder("asp, asp.net, prolog").setValue(this.plugin.settings.customExtensions).onChange(async (value) => {
        this.plugin.settings.customExtensions = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Show All Models").setDesc("Abilita il flag '-n 0'").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showAllModels).onChange(async (value) => {
        this.plugin.settings.showAllModels = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Hide Facts").setDesc("Abilita il flag '--no-facts'").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.hideFacts).onChange(async (value) => {
        this.plugin.settings.hideFacts = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Cache Results").setDesc("Abilita la cache dell'output").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.cacheResults).onChange(async (value) => {
        this.plugin.settings.cacheResults = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcclxuXHRBcHAsXHJcblx0UGx1Z2luLFxyXG5cdFBsdWdpblNldHRpbmdUYWIsXHJcblx0U2V0dGluZyxcclxuXHROb3RpY2UsXHJcblx0TWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCxcclxufSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgZXhlYyB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XHJcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0ICogYXMgb3MgZnJvbSBcIm9zXCI7XHJcbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSBcImZzXCI7XHJcbmltcG9ydCB7IERlY29yYXRpb24sIEVkaXRvclZpZXcsIFdpZGdldFR5cGUgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xyXG5pbXBvcnQgeyBSYW5nZVNldEJ1aWxkZXIgfSBmcm9tIFwiQGNvZGVtaXJyb3Ivc3RhdGVcIjtcclxuXHJcblxyXG5jb25zdCBleGVjQXN5bmMgPSBwcm9taXNpZnkoZXhlYyk7XHJcblxyXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XHJcblx0ZGx2UGF0aDogc3RyaW5nO1xyXG5cdGN1c3RvbUV4dGVuc2lvbnM6IHN0cmluZzsgLy8gZXMuIFwiYXNwLCBhc3AubmV0LCBwcm9sb2dcIlxyXG5cdHNob3dBbGxNb2RlbHM6IGJvb2xlYW47XHJcblx0aGlkZUZhY3RzOiBib29sZWFuO1xyXG5cdGNhY2hlUmVzdWx0czogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTXlQbHVnaW5TZXR0aW5ncyA9IHtcclxuXHRkbHZQYXRoOiBcIlwiLFxyXG5cdGN1c3RvbUV4dGVuc2lvbnM6IFwiYXNwXCIsIC8vIHB1XHUwMEYyIGVzc2VyZSB1bmEgbGlzdGEgc2VwYXJhdGEgZGEgdmlyZ29sYVxyXG5cdHNob3dBbGxNb2RlbHM6IGZhbHNlLFxyXG5cdGhpZGVGYWN0czogZmFsc2UsXHJcblx0Y2FjaGVSZXN1bHRzOiB0cnVlLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGx2UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogTXlQbHVnaW5TZXR0aW5ncztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgRGx2U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKFwiRExWIFBsdWdpbiBjYXJpY2F0b1wiKTtcclxuXHJcblx0XHQvLyBSRUdJU1RSQSBpbCBwb3N0LXByb2Nlc3NvciBwZXIgbGEgbW9kYWxpdFx1MDBFMCBQcmV2aWV3OlxyXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3NvcihcclxuXHRcdFx0KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBfY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0KSA9PiB7XHJcblx0XHRcdFx0Ly8gQ2VyY2EgdHV0dGkgaSBibG9jY2hpIGRpIGNvZGljZSAocHJlID4gY29kZSlcclxuXHRcdFx0XHRlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUgY29kZVwiKS5mb3JFYWNoKChjb2RlRWwpID0+IHtcclxuXHRcdFx0XHRcdGNvbnN0IGxhbmdDbGFzcyA9IEFycmF5LmZyb20oY29kZUVsLmNsYXNzTGlzdCkuZmluZCgoY2xzKSA9PlxyXG5cdFx0XHRcdFx0XHRjbHMuc3RhcnRzV2l0aChcImxhbmd1YWdlLVwiKVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdGlmICghbGFuZ0NsYXNzKSByZXR1cm47XHJcblx0XHRcdFx0XHRjb25zdCBsYW5nID0gbGFuZ0NsYXNzLnJlcGxhY2UoXCJsYW5ndWFnZS1cIiwgXCJcIikudG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRcdGNvbnN0IGV4dHMgPSB0aGlzLnNldHRpbmdzLmN1c3RvbUV4dGVuc2lvbnNcclxuXHRcdFx0XHRcdFx0LnNwbGl0KFwiLFwiKVxyXG5cdFx0XHRcdFx0XHQubWFwKCh4KSA9PiB4LnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcclxuXHRcdFx0XHRcdC8vIENvbnRyb2xsYSBzZSBpbCBsaW5ndWFnZ2lvIFx1MDBFOCB0cmEgcXVlbGxpIGluZGljYXRpIChtYXRjaCBlc2F0dG8gbyBpbml6aWEgY29uIFwiZXh0LlwiKVxyXG5cdFx0XHRcdFx0aWYgKCFleHRzLnNvbWUoKGUpID0+IGxhbmcgPT09IGUgfHwgbGFuZy5zdGFydHNXaXRoKGUgKyBcIi5cIikpKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0Ly8gQ29zdHJ1aXNjaSBpbCB3cmFwcGVyXHJcblx0XHRcdFx0XHRjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHRcdFx0XHRcdHdyYXBwZXIuY2xhc3NOYW1lID0gXCJkbHYtd3JhcHBlclwiO1xyXG5cdFx0XHRcdFx0d3JhcHBlci5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcilcIjtcclxuXHRcdFx0XHRcdHdyYXBwZXIuc3R5bGUubWFyZ2luID0gXCIxMHB4IDBcIjtcclxuXHRcdFx0XHRcdHdyYXBwZXIuc3R5bGUucGFkZGluZyA9IFwiNXB4XCI7XHJcblxyXG5cdFx0XHRcdFx0Ly8gSGVhZGVyIChjb24gbGluZ3VhZ2dpbyBlIHRhc3RvIFJ1bilcclxuXHRcdFx0XHRcdGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0XHRcdFx0XHRoZWFkZXIuY2xhc3NOYW1lID0gXCJkbHYtaGVhZGVyXCI7XHJcblx0XHRcdFx0XHRoZWFkZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG5cdFx0XHRcdFx0aGVhZGVyLnN0eWxlLmFsaWduSXRlbXMgPSBcImNlbnRlclwiO1xyXG5cdFx0XHRcdFx0aGVhZGVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJzcGFjZS1iZXR3ZWVuXCI7XHJcblx0XHRcdFx0XHRoZWFkZXIuc3R5bGUubWFyZ2luQm90dG9tID0gXCI1cHhcIjtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBsYW5nTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuXHRcdFx0XHRcdGxhbmdMYWJlbC50ZXh0Q29udGVudCA9IGxhbmcudG9VcHBlckNhc2UoKTtcclxuXHRcdFx0XHRcdGxhbmdMYWJlbC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcblx0XHRcdFx0XHRoZWFkZXIuYXBwZW5kQ2hpbGQobGFuZ0xhYmVsKTtcclxuXHJcblx0XHRcdFx0XHRjb25zdCBydW5CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG5cdFx0XHRcdFx0cnVuQnRuLnRleHRDb250ZW50ID0gXCJSdW4gd2l0aCBETFZcIjtcclxuXHRcdFx0XHRcdHJ1bkJ0bi5jbGFzc05hbWUgPSBcImRsdi1ydW4tYnV0dG9uXCI7XHJcblx0XHRcdFx0XHRoZWFkZXIuYXBwZW5kQ2hpbGQocnVuQnRuKTtcclxuXHJcblx0XHRcdFx0XHQvLyBDcmVhIGwnb3V0cHV0IGNvbnRhaW5lciAoY29uIGRpdmlkZXIpXHJcblx0XHRcdFx0XHRjb25zdCBkaXZpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImhyXCIpO1xyXG5cdFx0XHRcdFx0ZGl2aWRlci5jbGFzc05hbWUgPSBcImRsdi1kaXZpZGVyXCI7XHJcblxyXG5cdFx0XHRcdFx0Y29uc3Qgb3V0cHV0V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0XHRcdFx0XHRvdXRwdXRXcmFwcGVyLmNsYXNzTmFtZSA9IFwiZGx2LW91dHB1dC13cmFwcGVyXCI7XHJcblx0XHRcdFx0XHRvdXRwdXRXcmFwcGVyLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xyXG5cdFx0XHRcdFx0b3V0cHV0V3JhcHBlci5zdHlsZS5tYXJnaW5Ub3AgPSBcIjVweFwiO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IG91dHB1dFByZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XHJcblx0XHRcdFx0XHRvdXRwdXRQcmUuY2xhc3NOYW1lID0gXCJkbHYtb3V0cHV0XCI7XHJcblx0XHRcdFx0XHRvdXRwdXRQcmUuc3R5bGUub3V0bGluZSA9IFwiMXB4IHNvbGlkIHZhcigtLWludGVyYWN0aXZlLWFjY2VudClcIjtcclxuXHRcdFx0XHRcdG91dHB1dFByZS5zdHlsZS5wYWRkaW5nID0gXCI1cHhcIjtcclxuXHRcdFx0XHRcdG91dHB1dFByZS5zdHlsZS53aGl0ZVNwYWNlID0gXCJwcmUtd3JhcFwiO1xyXG5cdFx0XHRcdFx0b3V0cHV0UHJlLnN0eWxlLm1pbkhlaWdodCA9IFwiNTBweFwiO1xyXG5cdFx0XHRcdFx0b3V0cHV0V3JhcHBlci5hcHBlbmRDaGlsZChvdXRwdXRQcmUpO1xyXG5cclxuXHRcdFx0XHRcdGNvbnN0IGNvcHlCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG5cdFx0XHRcdFx0Y29weUJ0bi5jbGFzc05hbWUgPSBcImRsdi1jb3B5LW91dHB1dC1idG5cIjtcclxuXHRcdFx0XHRcdGNvcHlCdG4udGV4dENvbnRlbnQgPSBcIkNvcHkgT3V0cHV0XCI7XHJcblx0XHRcdFx0XHRjb3B5QnRuLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG5cdFx0XHRcdFx0Y29weUJ0bi5zdHlsZS50b3AgPSBcIjVweFwiO1xyXG5cdFx0XHRcdFx0Y29weUJ0bi5zdHlsZS5yaWdodCA9IFwiNXB4XCI7XHJcblx0XHRcdFx0XHRvdXRwdXRXcmFwcGVyLmFwcGVuZENoaWxkKGNvcHlCdG4pO1xyXG5cclxuXHRcdFx0XHRcdC8vIEluc2VyaXNjaSBoZWFkZXIsIGlsIGJsb2NjbyBkaSBjb2RpY2UgZSBvdXRwdXQgbmVsIHdyYXBwZXJcclxuXHRcdFx0XHRcdHdyYXBwZXIuYXBwZW5kQ2hpbGQoaGVhZGVyKTtcclxuXHRcdFx0XHRcdC8vIENsb25hIGwnZWxlbWVudG8gcHJlIGNvbnRlbmVudGUgaWwgY29kaWNlXHJcblx0XHRcdFx0XHRjb25zdCBvcmlnaW5hbFByZSA9IGNvZGVFbC5wYXJlbnRFbGVtZW50O1xyXG5cdFx0XHRcdFx0aWYgKCFvcmlnaW5hbFByZSkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0d3JhcHBlci5hcHBlbmRDaGlsZChvcmlnaW5hbFByZS5jbG9uZU5vZGUodHJ1ZSkpO1xyXG5cdFx0XHRcdFx0d3JhcHBlci5hcHBlbmRDaGlsZChkaXZpZGVyKTtcclxuXHRcdFx0XHRcdHdyYXBwZXIuYXBwZW5kQ2hpbGQob3V0cHV0V3JhcHBlcik7XHJcblxyXG5cdFx0XHRcdFx0Ly8gU29zdGl0dWlzY2kgaWwgYmxvY2NvIG9yaWdpbmFsZSBjb24gaWwgd3JhcHBlclxyXG5cdFx0XHRcdFx0b3JpZ2luYWxQcmUucGFyZW50RWxlbWVudD8ucmVwbGFjZUNoaWxkKHdyYXBwZXIsIG9yaWdpbmFsUHJlKTtcclxuXHJcblx0XHRcdFx0XHQvLyBFdmVudCBsaXN0ZW5lciBwZXIgaWwgdGFzdG8gUnVuXHJcblx0XHRcdFx0XHRydW5CdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdFx0cnVuQnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0bmV3IE5vdGljZShcIlJ1bm5pbmcgRExWIG9uIGNvZGUgYmxvY2suLi5cIiwgMTUwMCk7XHJcblx0XHRcdFx0XHRcdGNvbnN0IGNvZGVDb250ZW50ID0gY29kZUVsLnRleHRDb250ZW50O1xyXG5cdFx0XHRcdFx0XHRpZiAoIWNvZGVDb250ZW50KSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShcIk5lc3N1biBjb2RpY2UgZGEgZXNlZ3VpcmUuXCIpO1xyXG5cdFx0XHRcdFx0XHRcdHJ1bkJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMucnVuRGx2RnJvbUNvbnRlbnQobGFuZywgY29kZUNvbnRlbnQpO1xyXG5cdFx0XHRcdFx0XHRcdG91dHB1dFByZS5pbm5lclRleHQgPSBvdXRwdXQ7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjogYW55KSB7XHJcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkRMViBFcnJvcjpcIiwgZXJyKTtcclxuXHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKGBETFYgRXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCwgNTAwMCk7XHJcblx0XHRcdFx0XHRcdH0gZmluYWxseSB7XHJcblx0XHRcdFx0XHRcdFx0cnVuQnRuLmRpc2FibGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdC8vIEV2ZW50IGxpc3RlbmVyIHBlciBpbCB0YXN0byBDb3B5IE91dHB1dFxyXG5cdFx0XHRcdFx0Y29weUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KG91dHB1dFByZS5pbm5lclRleHQpO1xyXG5cdFx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJPdXRwdXQgY29waWF0byFcIik7XHJcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjogYW55KSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShgRXJyb3JlIGNvcGlhIG91dHB1dDogJHtlcnIubWVzc2FnZX1gLCA1MDAwKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblxyXG5cdFx0Ly8gUkVHSVNUUkEgdW4gRWRpdG9yIGV4dGVuc2lvbiBwZXIgbGEgbW9kYWxpdFx1MDBFMCBFZGl0LlxyXG5cdFx0Ly8gTGEgbG9naWNhIFx1MDBFOCBzaW1pbGU6IGNlcmNoaWFtbyBpbCBwYXR0ZXJuIGRlaSBjb2RlIGZlbmNlIGUgYWdnaXVuZ2lhbW8gd2lkZ2V0IChoZWFkZXIgZSBmb290ZXIpXHJcblx0XHQvLyBOT1RBOiBMYSBtb2RpZmljYSBpbiBtb2RhbGl0XHUwMEUwIEVkaXQgdHJhbWl0ZSBDb2RlTWlycm9yIFx1MDBFOCBtZW5vIFx1MjAxQ2ludmFzaXZhXHUyMDFEIGUgcHVcdTAwRjIgZXNzZXJlIG1lbm8gYWZmaWRhYmlsZSxcclxuXHRcdC8vIG1hIGRpIHNlZ3VpdG8gdW4gZXNlbXBpbyBzZW1wbGlmaWNhdG8uXHJcblx0XHR0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKHRoaXMuZ2V0RWRpdG9yRGVjb3JhdGlvbigpKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZ1bnppb25lIGNoZSBlc2VndWUgRExWIHN1bCBjb250ZW51dG8gZGF0byBlIHJpdG9ybmEgbGEgc3RyaW5nYSBkaSBvdXRwdXQuXHJcblx0ICogSW4gcXVlc3RhIGltcGxlbWVudGF6aW9uZSBpbCBjb250ZW51dG8gdmllbmUgc2NyaXR0byBpbiB1biBmaWxlIHRlbXBvcmFuZW8uXHJcblx0ICovXHJcblx0YXN5bmMgcnVuRGx2RnJvbUNvbnRlbnQobGFuZzogc3RyaW5nLCBjb2RlQ29udGVudDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuXHRcdGlmICghdGhpcy5zZXR0aW5ncy5kbHZQYXRoKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkRMViBwYXRoIG5vdCBjb25maWd1cmVkIVwiKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IHRtcERpciA9IG9zLnRtcGRpcigpO1xyXG5cdFx0Y29uc3QgdG1wRmlsZSA9IHBhdGguam9pbih0bXBEaXIsIGBkbHYtdGVtcC0ke0RhdGUubm93KCl9LiR7bGFuZ31gKTtcclxuXHRcdGF3YWl0IGZzLndyaXRlRmlsZSh0bXBGaWxlLCBjb2RlQ29udGVudCwgXCJ1dGY4XCIpO1xyXG5cclxuXHRcdGNvbnN0IGFyZ3NBcnI6IHN0cmluZ1tdID0gW3RtcEZpbGVdO1xyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3Muc2hvd0FsbE1vZGVscykge1xyXG5cdFx0XHRhcmdzQXJyLnB1c2goXCItblwiLCBcIjBcIik7XHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5oaWRlRmFjdHMpIHtcclxuXHRcdFx0YXJnc0Fyci5wdXNoKFwiLS1uby1mYWN0c1wiKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGNtZCA9IGBcIiR7dGhpcy5zZXR0aW5ncy5kbHZQYXRofVwiICR7YXJnc0FyclxyXG5cdFx0XHQubWFwKChhcmcpID0+IGBcIiR7YXJnfVwiYClcclxuXHRcdFx0LmpvaW4oXCIgXCIpfWA7XHJcblxyXG5cdFx0Y29uc3QgZXhlY09wdGlvbnMgPSB7XHJcblx0XHRcdHNoZWxsOiBwcm9jZXNzLnBsYXRmb3JtID09PSBcIndpbjMyXCIgPyBcImNtZC5leGVcIiA6IHVuZGVmaW5lZCxcclxuXHRcdH0gYXMgeyBzaGVsbD86IHN0cmluZyB9O1xyXG5cclxuXHRcdGNvbnN0IHsgc3Rkb3V0LCBzdGRlcnIgfSA9IGF3YWl0IGV4ZWNBc3luYyhjbWQsIGV4ZWNPcHRpb25zKTtcclxuXHRcdGlmIChzdGRlcnIpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKHN0ZGVycik7XHJcblx0XHR9XHJcblx0XHRhd2FpdCBmcy51bmxpbmsodG1wRmlsZSk7XHJcblx0XHRyZXR1cm4gc3Rkb3V0O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXNlbXBpbyBzZW1wbGlmaWNhdG8gZGkgZWRpdG9yIGRlY29yYXRpb24gcGVyIGxhIG1vZGFsaXRcdTAwRTAgRWRpdDpcclxuXHQgKiBBZ2dpdW5nZSB1biB3aWRnZXQgaGVhZGVyIChjb24gdGFzdG8gUnVuKSBzb3ByYSBvZ25pIGNvZGUgZmVuY2UgY2hlIGNvcnJpc3BvbmRlIGFsbGUgZXN0ZW5zaW9uaS5cclxuXHQgKi9cclxuXHRnZXRFZGl0b3JEZWNvcmF0aW9uKCkge1xyXG5cdFx0Y29uc3QgcGx1Z2luID0gdGhpcztcclxuXHRcdHJldHVybiBFZGl0b3JWaWV3LmRlY29yYXRpb25zLmNvbXB1dGUoW1wiZG9jXCJdLCAoc3RhdGU6IGFueSkgPT4ge1xyXG5cdFx0XHRjb25zdCBidWlsZGVyID0gbmV3IFJhbmdlU2V0QnVpbGRlcjxEZWNvcmF0aW9uPigpO1xyXG5cdFx0XHRjb25zdCBkb2NUZXh0ID0gc3RhdGUuZG9jLnRvU3RyaW5nKCk7XHJcblx0XHRcdGNvbnN0IHJlZ2V4ID0gL15gYGAoXFxTKykvZ207XHJcblx0XHRcdGxldCBtYXRjaDogYW55O1xyXG5cdFx0XHR3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhkb2NUZXh0KSkgIT09IG51bGwpIHtcclxuXHRcdFx0XHRjb25zdCBsYW5nID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcclxuXHRcdFx0XHRjb25zdCBleHRzID0gdGhpcy5zZXR0aW5ncy5jdXN0b21FeHRlbnNpb25zXHJcblx0XHRcdFx0XHQuc3BsaXQoXCIsXCIpXHJcblx0XHRcdFx0XHQubWFwKCh4OiBzdHJpbmcpID0+IHgudHJpbSgpLnRvTG93ZXJDYXNlKCkpO1xyXG5cdFx0XHRcdGlmICghZXh0cy5zb21lKChlOiBzdHJpbmcpID0+IGxhbmcgPT09IGUgfHwgbGFuZy5zdGFydHNXaXRoKGUgKyBcIi5cIikpKVxyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHRcdGNvbnN0IHBvcyA9IHN0YXRlLmRvYy5saW5lQXQobWF0Y2guaW5kZXgpLmZyb207XHJcblx0XHRcdFx0YnVpbGRlci5hZGQoXHJcblx0XHRcdFx0XHRwb3MsXHJcblx0XHRcdFx0XHRwb3MsXHJcblx0XHRcdFx0XHREZWNvcmF0aW9uLndpZGdldCh7XHJcblx0XHRcdFx0XHRcdHdpZGdldDogbmV3IGNsYXNzIGV4dGVuZHMgV2lkZ2V0VHlwZSB7XHJcblx0XHRcdFx0XHRcdFx0dG9ET00oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGFpbmVyLnN0eWxlLm1hcmdpbiA9IFwiMTBweCAwXCI7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSGVhZGVyIGNvbiBsaW5ndWFnZ2lvIGUgcHVsc2FudGUgUnVuXHJcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aGVhZGVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuXHRcdFx0XHRcdFx0XHRcdGhlYWRlci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwic3BhY2UtYmV0d2VlblwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0aGVhZGVyLnN0eWxlLnBhZGRpbmcgPSBcIjVweFwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0aGVhZGVyLnN0eWxlLmJhY2tncm91bmQgPSBcInZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KVwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0aGVhZGVyLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKVwiO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGxhbmdMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0bGFuZ0xhYmVsLnRleHRDb250ZW50ID0gbGFuZy50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0bGFuZ0xhYmVsLnN0eWxlLmZvbnRXZWlnaHQgPSBcImJvbGRcIjtcclxuXHRcdFx0XHRcdFx0XHRcdGhlYWRlci5hcHBlbmRDaGlsZChsYW5nTGFiZWwpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHJ1bkJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcblx0XHRcdFx0XHRcdFx0XHRydW5CdG4udGV4dENvbnRlbnQgPSBcIlJ1biB3aXRoIERMVlwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0cnVuQnRuLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0aGVhZGVyLmFwcGVuZENoaWxkKHJ1bkJ0bik7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29udGVuaXRvcmUgb3V0cHV0XHJcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBvdXRwdXRXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdG91dHB1dFdyYXBwZXIuc3R5bGUubWFyZ2luVG9wID0gXCI1cHhcIjtcclxuXHRcdFx0XHRcdFx0XHRcdG91dHB1dFdyYXBwZXIuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3Qgb3V0cHV0UHJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdG91dHB1dFByZS5jbGFzc05hbWUgPSBcImRsdi1vdXRwdXQtZWRpdFwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0b3V0cHV0UHJlLnN0eWxlLnBhZGRpbmcgPSBcIjVweFwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0b3V0cHV0UHJlLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIHZhcigtLWludGVyYWN0aXZlLWFjY2VudClcIjtcclxuXHRcdFx0XHRcdFx0XHRcdG91dHB1dFByZS5zdHlsZS5taW5IZWlnaHQgPSBcIjUwcHhcIjtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBjb3B5QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdGNvcHlCdG4udGV4dENvbnRlbnQgPSBcIkNvcHkgT3V0cHV0XCI7XHJcblx0XHRcdFx0XHRcdFx0XHRjb3B5QnRuLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29weUJ0bi5zdHlsZS50b3AgPSBcIjVweFwiO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29weUJ0bi5zdHlsZS5yaWdodCA9IFwiNXB4XCI7XHJcblx0XHRcdFx0XHRcdFx0XHRjb3B5QnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjsgLy8gTmFzY29uZGkgaW5pemlhbG1lbnRlXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0b3V0cHV0V3JhcHBlci5hcHBlbmRDaGlsZChvdXRwdXRQcmUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0b3V0cHV0V3JhcHBlci5hcHBlbmRDaGlsZChjb3B5QnRuKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBBc3NlbWJsYSB0dXR0b1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRlcik7XHJcblx0XHRcdFx0XHRcdFx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQob3V0cHV0V3JhcHBlcik7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTG9naWNhIGVzZWN1emlvbmVcclxuXHRcdFx0XHRcdFx0XHRcdHJ1bkJ0bi5vbmNsaWNrID0gYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBjb2RlUmVnZXggPSBuZXcgUmVnRXhwKGBcXGBcXGBcXGBcXFxccyoke2xhbmd9XFxcXHMqKFtcXFxcc1xcXFxTXSo/KVxcXFxcXGBcXGBcXGBgLCBcIm1cIik7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNvZGVNYXRjaCA9IGRvY1RleHQubWF0Y2goY29kZVJlZ2V4KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFjb2RlTWF0Y2gpIHJldHVybjtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cnVuQnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBvdXRwdXQgPSBhd2FpdCBwbHVnaW4ucnVuRGx2RnJvbUNvbnRlbnQobGFuZywgY29kZU1hdGNoWzFdLnRyaW0oKSk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0cHV0UHJlLnRleHRDb250ZW50ID0gb3V0cHV0O1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHlCdG4uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0cHV0UHJlLnRleHRDb250ZW50ID0gYEVycm9yOiAke2Vyci5tZXNzYWdlfWA7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH0gZmluYWxseSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0cnVuQnRuLmRpc2FibGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29waWEgb3V0cHV0XHJcblx0XHRcdFx0XHRcdFx0XHRjb3B5QnRuLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KG91dHB1dFByZS50ZXh0Q29udGVudCB8fCBcIlwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShcIk91dHB1dCBjb3BpYXRvIVwiKTtcclxuXHRcdFx0XHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRhaW5lcjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0oKSxcclxuXHRcdFx0XHRcdFx0c2lkZTogMSwgLy8gUG9zaXppb25hIGRvcG8gaWwgY29kZWJsb2NrXHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGJ1aWxkZXIuZmluaXNoKCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHRjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGRhdGEpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgIFNFQ1RJT046IFBsdWdpbiBTZXR0aW5ncyBUYWJcclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuY2xhc3MgRGx2U2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogRGx2UGx1Z2luO1xyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IERsdlBsdWdpbikge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0fVxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIkRMViBQbHVnaW4gU2V0dGluZ3NcIiB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJETFYgRXhlY3V0YWJsZSBQYXRoXCIpXHJcblx0XHRcdC5zZXREZXNjKFwiUGVyY29yc28gYXNzb2x1dG8gYSBETFYuZXhlXCIpXHJcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHRcdHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihcIkM6XFxcXHBhdGhcXFxcdG9cXFxcZGx2LmV4ZVwiKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRsdlBhdGgpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmRsdlBhdGggPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIkZpbGUgRXh0ZW5zaW9ucyAoZm9yIGNvZGUgYmxvY2tzKVwiKVxyXG5cdFx0XHQuc2V0RGVzYyhcIkVsZW5jbyBzZXBhcmF0byBkYSB2aXJnb2xhIGRlaSBsaW5ndWFnZ2kgZGEgcmljb25vc2NlcmUgKGVzLiBhc3AsIGFzcC5uZXQsIHByb2xvZylcIilcclxuXHRcdFx0LmFkZFRleHQoKHRleHQpID0+XHJcblx0XHRcdFx0dGV4dFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFwiYXNwLCBhc3AubmV0LCBwcm9sb2dcIilcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21FeHRlbnNpb25zKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21FeHRlbnNpb25zID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJTaG93IEFsbCBNb2RlbHNcIilcclxuXHRcdFx0LnNldERlc2MoXCJBYmlsaXRhIGlsIGZsYWcgJy1uIDAnXCIpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93QWxsTW9kZWxzKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93QWxsTW9kZWxzID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJIaWRlIEZhY3RzXCIpXHJcblx0XHRcdC5zZXREZXNjKFwiQWJpbGl0YSBpbCBmbGFnICctLW5vLWZhY3RzJ1wiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcblx0XHRcdFx0dG9nZ2xlXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuaGlkZUZhY3RzKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlRmFjdHMgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIkNhY2hlIFJlc3VsdHNcIilcclxuXHRcdFx0LnNldERlc2MoXCJBYmlsaXRhIGxhIGNhY2hlIGRlbGwnb3V0cHV0XCIpXHJcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuXHRcdFx0XHR0b2dnbGVcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jYWNoZVJlc3VsdHMpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNhY2hlUmVzdWx0cyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0fVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBT087QUFDUCwyQkFBcUI7QUFDckIsa0JBQTBCO0FBQzFCLFdBQXNCO0FBQ3RCLFNBQW9CO0FBQ3BCLGdCQUErQjtBQUMvQixrQkFBbUQ7QUFDbkQsbUJBQWdDO0FBR2hDLElBQU0sZ0JBQVksdUJBQVUseUJBQUk7QUFVaEMsSUFBTSxtQkFBcUM7QUFBQSxFQUMxQyxTQUFTO0FBQUEsRUFDVCxrQkFBa0I7QUFBQTtBQUFBLEVBQ2xCLGVBQWU7QUFBQSxFQUNmLFdBQVc7QUFBQSxFQUNYLGNBQWM7QUFDZjtBQUVBLElBQXFCLFlBQXJCLGNBQXVDLHVCQUFPO0FBQUEsRUFHN0MsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFDeEIsU0FBSyxjQUFjLElBQUksY0FBYyxLQUFLLEtBQUssSUFBSSxDQUFDO0FBRXBELFlBQVEsSUFBSSxxQkFBcUI7QUFHakMsU0FBSztBQUFB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
