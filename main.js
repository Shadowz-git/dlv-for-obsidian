/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DlvPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_util = require("util");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var path = __toESM(require("path"));
var import_fs = require("fs");
var os = __toESM(require("os"));
var execAsync = (0, import_util.promisify)(import_child_process.exec);
var DEFAULT_SETTINGS = {
  dlvPath: "",
  customExtensions: "asp",
  showErrors: false,
  showAllModels: false,
  hideFacts: false,
  cacheResults: true
};
var CodeBlockWidget = class extends import_view.WidgetType {
  constructor(plugin, lang, start, end, docText) {
    super();
    this.plugin = plugin;
    this.lang = lang;
    this.start = start;
    this.end = end;
    this.docText = docText;
  }
  toDOM() {
    const { header, outputPre, copyBtn } = this.plugin.createCodeBlockUI(this.lang);
    const runBtn = header.querySelector(".run-btn");
    const saveBtn = header.querySelector(".save-btn");
    runBtn.onclick = async () => {
      runBtn.disabled = true;
      try {
        const codeContent = this.docText.slice(this.start, this.end).trim();
        const result = await this.plugin.executeDlv(codeContent, this.lang);
        this.plugin.updateOutputUI(outputPre, copyBtn, result);
      } finally {
        runBtn.disabled = false;
      }
    };
    saveBtn.onclick = async () => {
      saveBtn.disabled = true;
      try {
        const codeContent = this.docText.slice(this.start, this.end).trim();
        const result = await this.plugin.executeDlv(codeContent, this.lang);
        await this.plugin.saveExecutionResult(result);
      } finally {
        saveBtn.disabled = false;
      }
    };
    copyBtn.onclick = () => this.plugin.copyToClipboard(outputPre.textContent || "");
    const container = document.createElement("div");
    container.className = "dlv-codeblock";
    container.append(header, outputPre);
    return container;
  }
  eq(other) {
    return this.start === other.start && this.end === other.end && this.lang === other.lang;
  }
};
var DlvPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addStyle();
    this.registerEditorExtension(this.getEditorDecoration());
    this.registerMarkdownPostProcessor(this.markdownPostProcessor.bind(this));
    this.addSettingTab(new DlvSettingTab(this.app, this));
    this.registerFileHeaderButtons();
  }
  registerFileHeaderButtons() {
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      if (file instanceof import_obsidian.TFile && this.isSupportedExtension(file.extension)) {
        this.addRunButtonToHeader(file);
      }
    }));
  }
  addStyle() {
    this.stylesEl = document.createElement("style");
    this.stylesEl.textContent = `
            .dlv-codeblock {
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                margin: 1rem 0;
                padding: 0.5rem;
            }
            .dlv-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.5rem;
                margin-top: 0.5rem;
            }
            .dlv-output {
                white-space: pre-wrap;
                word-break: break-word;
                padding: 0.5rem;
                background: var(--background-primary);
                border: 1px solid var(--background-modifier-border);
                position: relative;
            }
            .dlv-error {
            	color: #ff5555;
            	margin-top: 0.5rem;
        	}
            .dlv-buttons {
                display: flex;
                gap: 0.5rem;
            }
			.dlv-run-container {
				gap: 4px;
				margin-right: 12px;
			}
			.dlv-run-button {
				color: var(--text-normal) !important;
				transition: background-color 0.15s ease;
			}
			.dlv-run-button:hover {
				background-color: var(--background-modifier-hover) !important;
			}
			.dlv-run-button svg {
				flex-shrink: 0;
			}
			.dlv-button-text {
				font-size: 0.85em;
				position: relative;
				bottom: 0.076rem;
			}
			@media (max-width: 400px) {
				.dlv-button-text {
					display: none;
				}
			}
			.dlv-tooltip {
				color: var(--text-muted);
				font-size: 0.85em;
			}
        `;
    document.head.appendChild(this.stylesEl);
  }
  createCodeBlockUI(lang) {
    const header = document.createElement("div");
    header.className = "dlv-header";
    const langLabel = document.createElement("span");
    langLabel.textContent = lang.toUpperCase();
    const buttons = document.createElement("div");
    buttons.className = "dlv-buttons";
    const runBtn = this.createButton("\u25B6 Run", "run-btn");
    const saveBtn = this.createButton("\u{1F4BE} Save", "save-btn");
    const copyBtn = this.createButton("\u{1F4CB} Copy", "copy-btn");
    buttons.append(runBtn, saveBtn);
    header.append(langLabel, buttons);
    const outputPre = document.createElement("pre");
    outputPre.className = "dlv-output";
    outputPre.style.display = "none";
    return { header, outputPre, copyBtn };
  }
  createButton(text, className) {
    const btn = document.createElement("button");
    btn.className = className;
    btn.textContent = text;
    return btn;
  }
  async executeDlv(content, lang) {
    if (!this.settings.dlvPath) {
      throw new Error("Percorso di DLV non configurato!");
    }
    const tmpDir = os.tmpdir();
    const tmpFile = path.join(tmpDir, `dlv-temp-${Date.now()}.${lang}`);
    await import_fs.promises.writeFile(tmpFile, content, "utf8");
    const argsArr = [tmpFile];
    if (this.settings.showAllModels) {
      argsArr.push("-n", "0");
    }
    if (this.settings.hideFacts) {
      argsArr.push("--no-facts");
    }
    try {
      const { stdout, stderr } = await execAsync(
        `"${this.settings.dlvPath}" ${argsArr.map((arg) => `"${arg}"`).join(" ")}`,
        { shell: process.platform === "win32" ? "cmd.exe" : void 0 }
      );
      const cleanedStdout = this.cleanOutput(stdout);
      const cleanedStderr = this.cleanErrors(stderr);
      return {
        stdout: cleanedStdout,
        stderr: cleanedStderr
      };
    } catch (error) {
      return {
        stdout: "",
        stderr: error instanceof Error ? this.cleanErrors(error.message) : "Errore sconosciuto"
      };
    } finally {
      await import_fs.promises.unlink(tmpFile).catch(() => {
      });
    }
  }
  cleanOutput(output) {
    return output.replace(/^DLV \d+\.\d+\.\d+\s*\n/, "").replace(/Generic warning: .*\n?/g, "").trim();
  }
  cleanErrors(errorOutput) {
    return errorOutput.replace(/Generic warning: .*\n?/g, "").trim();
  }
  updateOutputUI(outputEl, copyBtn, result) {
    outputEl.innerHTML = result.stdout.replace(/\n/g, "<br>");
    outputEl.style.display = "block";
    if (this.settings.showErrors && result.stderr) {
      const errorEl = document.createElement("div");
      errorEl.className = "dlv-error";
      errorEl.innerHTML = result.stderr.replace(/\n/g, "<br>");
      outputEl.appendChild(errorEl);
    }
    copyBtn.style.display = "block";
  }
  async saveExecutionResult(result) {
    const timestamp = new Date().toLocaleString();
    let content = `% ${timestamp}
`;
    if (result.stdout) {
      content += "% AnswerSet\n" + result.stdout.split("\n").map((line) => `% ${line}`).join("\n");
    }
    if (this.settings.showErrors && result.stderr) {
      content += "\n% Errore\n" + result.stderr.split("\n").map((line) => `% ${line}`).join("\n");
    }
    const file = this.app.workspace.getActiveFile();
    if (file) {
      await this.app.vault.append(file, `

${content.trim()}`);
      new import_obsidian.Notice("Risultato salvato nel file!");
    }
  }
  copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => new import_obsidian.Notice("Copied to clipboard"));
  }
  addRunButtonToHeader(file) {
    const titleBar = this.app.workspace.getLeaf().view.containerEl.querySelector(".view-header");
    if (!titleBar)
      return;
    const actionsContainer = titleBar.querySelector(".view-actions") || titleBar.querySelector(".titlebar-button-container");
    if (!actionsContainer)
      return;
    actionsContainer.querySelectorAll(".dlv-run-button").forEach((btn) => btn.remove());
    const runBtn = document.createElement("div");
    runBtn.className = "clickable-icon dlv-run-button";
    runBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" 
             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="5 3 19 12 5 21 5 3"/>
        </svg>
        <span class="dlv-button-text">Run</span>
    `;
    runBtn.style.cssText = `
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 4px 8px;
        margin: 0 2px;
        border-radius: 4px;
        position: relative;
        top: -1px;
    `;
    runBtn.addEventListener("mouseenter", () => {
      runBtn.style.backgroundColor = "var(--background-modifier-hover)";
    });
    runBtn.addEventListener("mouseleave", () => {
      runBtn.style.backgroundColor = "transparent";
    });
    runBtn.onclick = async () => {
      try {
        const content = await this.app.vault.read(file);
        const result = await this.executeDlv(content, file.extension);
        await this.saveExecutionResult(result);
      } catch (error) {
        new import_obsidian.Notice(`Errore: ${error instanceof Error ? error.message : "Errore sconosciuto"}`);
      }
    };
    actionsContainer.insertBefore(runBtn, actionsContainer.firstChild);
  }
  markdownPostProcessor(element, ctx) {
    element.querySelectorAll("pre code").forEach((codeEl) => {
      var _a;
      const el = codeEl;
      const lang = this.getCodeBlockLanguage(el);
      if (!lang || !this.isSupportedLanguage(lang))
        return;
      const { header, outputPre, copyBtn } = this.createCodeBlockUI(lang);
      const runBtn = header.querySelector(".run-btn");
      const saveBtn = header.querySelector(".save-btn");
      const wrapper = document.createElement("div");
      wrapper.className = "dlv-codeblock";
      wrapper.append(
        header,
        el.parentElement.cloneNode(true),
        outputPre
      );
      runBtn.onclick = async () => {
        const result = await this.executeDlv(el.textContent || "", lang);
        this.updateOutputUI(outputPre, copyBtn, result);
      };
      saveBtn.onclick = async () => {
        const result = await this.executeDlv(el.textContent || "", lang);
        await this.saveExecutionResult(result);
      };
      copyBtn.onclick = () => this.copyToClipboard(outputPre.textContent || "");
      (_a = el.parentElement) == null ? void 0 : _a.replaceWith(wrapper);
    });
  }
  getCodeBlockLanguage(element) {
    const langClass = Array.from(element.classList).find((c) => c.startsWith("language-"));
    return langClass == null ? void 0 : langClass.replace("language-", "");
  }
  isSupportedLanguage(lang) {
    return this.settings.customExtensions.split(",").map((e) => e.trim().toLowerCase()).some((e) => lang.toLowerCase() === e || lang.toLowerCase().startsWith(e + "."));
  }
  isSupportedExtension(ext) {
    return this.isSupportedLanguage(ext);
  }
  getEditorDecoration() {
    return import_view.EditorView.decorations.compute(["doc"], (state) => {
      const builder = new import_state.RangeSetBuilder();
      const text = state.doc.toString();
      const regex = /```(\S+)\n([\s\S]*?)```/g;
      let match;
      while ((match = regex.exec(text)) !== null) {
        const lang = match[1].toLowerCase();
        if (this.isSupportedLanguage(lang)) {
          const start = match.index + match[0].indexOf(match[2]);
          const end = start + match[2].length;
          builder.add(end, end, import_view.Decoration.widget({
            widget: new CodeBlockWidget(this, lang, start, end, text),
            side: 1
          }));
        }
      }
      return builder.finish();
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    var _a;
    (_a = this.stylesEl) == null ? void 0 : _a.remove();
  }
};
var DlvSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "DLV Settings" });
    new import_obsidian.Setting(containerEl).setName("DLV Path").setDesc("Path to DLV executable").addText((text) => text.setValue(this.plugin.settings.dlvPath).onChange((v) => {
      this.plugin.settings.dlvPath = v;
      this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Supported Extensions").setDesc("Comma-separated list of file extensions").addText((text) => text.setValue(this.plugin.settings.customExtensions).onChange((v) => {
      this.plugin.settings.customExtensions = v;
      this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Mostra tutti i modelli").setDesc("Abilita il flag -n 0 per visualizzare tutti i modelli").addToggle((toggle) => toggle.setValue(this.plugin.settings.showAllModels).onChange((v) => {
      this.plugin.settings.showAllModels = v;
      this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Nascondi fatti").setDesc("Abilita il flag --no-facts per nascondere i fatti").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideFacts).onChange((v) => {
      this.plugin.settings.hideFacts = v;
      this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Errors").setDesc("Display error messages in output").addToggle((toggle) => toggle.setValue(this.plugin.settings.showErrors).onChange((v) => {
      this.plugin.settings.showErrors = v;
      this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
