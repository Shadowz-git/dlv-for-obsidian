/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DlvPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_util = require("util");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var path = __toESM(require("path"));
var import_fs = require("fs");
var os = __toESM(require("os"));
var execAsync = (0, import_util.promisify)(import_child_process.exec);
var DEFAULT_SETTINGS = {
  dlvLocationType: "relative",
  absolutePath: "",
  relativeExecutable: "executables/dlv.exe",
  availableExecutables: [],
  customExtensions: "asp",
  showErrors: false,
  showAllModels: false,
  hideFacts: false,
  cacheResults: true
};
var CodeBlockWidget = class extends import_view.WidgetType {
  constructor(plugin, lang, start, end, docText) {
    super();
    this.plugin = plugin;
    this.lang = lang;
    this.start = start;
    this.end = end;
    this.docText = docText;
  }
  toDOM() {
    const { header, outputPre, copyBtn } = this.plugin.createCodeBlockUI(this.lang);
    const runBtn = header.querySelector(".run-btn");
    const saveBtn = header.querySelector(".save-btn");
    runBtn.onclick = async () => {
      runBtn.disabled = true;
      try {
        const codeContent = this.docText.slice(this.start, this.end).trim();
        const result = await this.plugin.executeDlv(codeContent, this.lang);
        this.plugin.updateOutputUI(outputPre, copyBtn, result);
      } finally {
        runBtn.disabled = false;
      }
    };
    saveBtn.onclick = async () => {
      saveBtn.disabled = true;
      try {
        const codeContent = this.docText.slice(this.start, this.end).trim();
        const result = await this.plugin.executeDlv(codeContent, this.lang);
        await this.plugin.saveExecutionResult(result);
      } finally {
        saveBtn.disabled = false;
      }
    };
    copyBtn.onclick = () => this.plugin.copyToClipboard(outputPre.textContent || "");
    const container = document.createElement("div");
    container.className = "dlv-codeblock";
    container.append(header, outputPre);
    return container;
  }
  eq(other) {
    return this.start === other.start && this.end === other.end && this.lang === other.lang;
  }
};
var DlvPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.initializePluginPath();
    await this.loadSettings();
    this.addStyle();
    this.registerEditorExtension(this.getEditorDecoration());
    this.registerMarkdownPostProcessor(this.markdownPostProcessor.bind(this));
    this.addSettingTab(new DlvSettingTab(this.app, this));
    this.registerFileHeaderButtons();
  }
  registerFileHeaderButtons() {
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      if (file instanceof import_obsidian.TFile && this.isSupportedExtension(file.extension)) {
        this.addRunButtonToHeader(file);
      }
    }));
  }
  addStyle() {
    this.stylesEl = document.createElement("style");
    this.stylesEl.textContent = `
            .dlv-codeblock {
                border: 1px solid var(--background-modifier-border);
                border-radius: 4px;
                margin: 1rem 0;
                padding: 0.5rem;
            }
            .dlv-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 0.5rem;
                margin-top: 0.5rem;
            }
            .dlv-output {
                white-space: pre-wrap;
                word-break: break-word;
                padding: 0.5rem;
                background: var(--background-primary);
                border: 1px solid var(--background-modifier-border);
                position: relative;
            }
            .dlv-error {
				background: var(--background-secondary);
				padding: 0.5rem;
				border-radius: 4px;
				margin-top: 0.5rem;
				border-left: 3px solid #ff5555;
			}
			
			.error-icon {
				margin-right: 0.5rem;
				color: #ff5555;
			}
			
			.error-content {
				display: inline-block;
				vertical-align: middle;
			}
			
			.error-line {
				margin: 0.25rem 0;
				font-family: var(--font-monospace);
				font-size: 0.9em;
			}
            .dlv-buttons {
                display: flex;
                gap: 0.5rem;
            }
			.dlv-run-container {
				gap: 4px;
				margin-right: 12px;
			}
			.dlv-run-button {
				color: var(--text-normal) !important;
				transition: background-color 0.15s ease;
			}
			.dlv-run-button:hover {
				background-color: var(--background-modifier-hover) !important;
			}
			.dlv-run-button svg {
				flex-shrink: 0;
			}
			.dlv-button-text {
				font-size: 0.85em;
				position: relative;
				bottom: 0.076rem;
			}
			@media (max-width: 400px) {
				.dlv-button-text {
					display: none;
				}
			}
			.dlv-tooltip {
				color: var(--text-muted);
				font-size: 0.85em;
			}
        `;
    document.head.appendChild(this.stylesEl);
  }
  createCodeBlockUI(lang) {
    const header = document.createElement("div");
    header.className = "dlv-header";
    const langLabel = document.createElement("span");
    langLabel.textContent = lang.toUpperCase();
    const buttons = document.createElement("div");
    buttons.className = "dlv-buttons";
    const runBtn = this.createButton("\u25B6 Run", "run-btn");
    const saveBtn = this.createButton("\u{1F4BE} Save", "save-btn");
    const copyBtn = this.createButton("\u{1F4CB} Copy", "copy-btn");
    buttons.append(runBtn, saveBtn);
    header.append(langLabel, buttons);
    const outputPre = document.createElement("pre");
    outputPre.className = "dlv-output";
    outputPre.style.display = "none";
    return { header, outputPre, copyBtn };
  }
  createButton(text, className) {
    const btn = document.createElement("button");
    btn.className = className;
    btn.textContent = text;
    return btn;
  }
  async executeDlv(content, lang) {
    try {
      const dlvPath = this.getDlvPath();
      await import_fs.promises.access(dlvPath);
      const tmpDir = os.tmpdir();
      await import_fs.promises.mkdir(tmpDir, { recursive: true });
      const tmpFile = path.join(tmpDir, `dlv-temp-${Date.now()}.${lang}`);
      await import_fs.promises.writeFile(tmpFile, content, "utf8");
      const args = [tmpFile];
      if (this.settings.showAllModels)
        args.push("-n", "0");
      if (this.settings.hideFacts)
        args.push("--no-facts");
      const { stdout, stderr } = await execAsync(
        `"${dlvPath}" ${args.map((arg) => `"${arg}"`).join(" ")}`,
        {
          shell: process.platform === "win32" ? "cmd.exe" : void 0,
          windowsHide: true,
          encoding: "utf-8"
        }
      );
      await import_fs.promises.unlink(tmpFile).catch(() => {
      });
      return {
        stdout: this.cleanOutput(stdout),
        stderr: this.cleanErrors(stderr)
      };
    } catch (error) {
      let errorMessage = "Errore sconosciuto";
      if (error instanceof Error) {
        errorMessage = error.message;
        console.error("Errore executeDlv:", error);
      }
      return {
        stdout: "",
        stderr: errorMessage
      };
    }
  }
  cleanOutput(output) {
    return output.replace(/^DLV \d+\.\d+\.\d+\s*\n/, "").replace(/Generic warning: .*\n?/g, "").trim();
  }
  cleanErrors(errorOutput) {
    const lines = errorOutput.split("\n").map((line) => {
      line = line.replace(/([A-Za-z]:\\[^\s]+|\/[^\s]+)/g, "").replace(/(dlv-temp-\d+\.asp)/gi, "Input");
      const errorMatch = line.match(/(line \d+):\s*(.*)/i);
      if (errorMatch) {
        return `${errorMatch[1]}: ${errorMatch[2].replace(/^.*?:\s*/, "")}`;
      }
      return line.includes("Command failed:") || line.includes("Aborting due to") ? "" : line;
    }).filter((line) => line.trim().length > 0);
    return lines.join("\n").replace(/(line \d+):/gi, "Errore:\n$1").replace(/[.:]+$/, "").trim();
  }
  formatErrorMessages(errorString) {
    return errorString.split("\n").map((line) => {
      const match = line.match(/Linea (\d+):\s*(.*)/i);
      if (match) {
        return `<div class="error-line">
                    <span class="error-line-number">Linea ${match[1]}:</span>
                    <span class="error-message">${match[2]}</span>
                </div>`;
      }
      return line ? `<div class="error-general">${line}</div>` : "";
    }).join("");
  }
  updateOutputUI(outputEl, copyBtn, result) {
    outputEl.innerHTML = result.stdout.replace(/\n/g, "<br>");
    outputEl.style.display = "block";
    if (this.settings.showErrors && result.stderr) {
      const errorContent = this.cleanErrors(result.stderr).split("\n").map((line) => `<div class="error-line"><b>${line.split(":")[0]}:</b> ${line.split(":").slice(1).join(":")}</div>`).join("");
      const errorEl = document.createElement("div");
      errorEl.className = "dlv-error";
      errorEl.innerHTML = `<pre>${errorContent}</pre>`;
      outputEl.appendChild(errorEl);
    }
    copyBtn.style.display = "block";
  }
  async saveExecutionResult(result) {
    const timestamp = new Date().toLocaleString();
    let content = `% ${timestamp}
`;
    if (result.stdout) {
      content += "% AnswerSet\n" + result.stdout.split("\n").map((line) => `% ${line}`).join("\n");
    }
    if (this.settings.showErrors && result.stderr) {
      content += "\n% Errore\n" + result.stderr.split("\n").map((line) => `% ${line}`).join("\n");
    }
    const file = this.app.workspace.getActiveFile();
    if (file) {
      await this.app.vault.append(file, `

${content.trim()}`);
      new import_obsidian.Notice("Risultato salvato nel file!");
    }
  }
  copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => new import_obsidian.Notice("Copied to clipboard"));
  }
  addRunButtonToHeader(file) {
    const titleBar = this.app.workspace.getLeaf().view.containerEl.querySelector(".view-header");
    if (!titleBar)
      return;
    const actionsContainer = titleBar.querySelector(".view-actions") || titleBar.querySelector(".titlebar-button-container");
    if (!actionsContainer)
      return;
    actionsContainer.querySelectorAll(".dlv-run-button").forEach((btn) => btn.remove());
    const runBtn = document.createElement("div");
    runBtn.className = "clickable-icon dlv-run-button";
    runBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" 
             stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="5 3 19 12 5 21 5 3"/>
        </svg>
        <span class="dlv-button-text">Run</span>
    `;
    runBtn.style.cssText = `
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 4px 8px;
        margin: 0 2px;
        border-radius: 4px;
        position: relative;
        top: -1px;
    `;
    runBtn.addEventListener("mouseenter", () => {
      runBtn.style.backgroundColor = "var(--background-modifier-hover)";
    });
    runBtn.addEventListener("mouseleave", () => {
      runBtn.style.backgroundColor = "transparent";
    });
    runBtn.onclick = async () => {
      try {
        const content = await this.app.vault.read(file);
        const result = await this.executeDlv(content, file.extension);
        await this.saveExecutionResult(result);
      } catch (error) {
        new import_obsidian.Notice(`Errore: ${error instanceof Error ? error.message : "Errore sconosciuto"}`);
      }
    };
    actionsContainer.insertBefore(runBtn, actionsContainer.firstChild);
  }
  markdownPostProcessor(element, ctx) {
    element.querySelectorAll("pre code").forEach((codeEl) => {
      var _a;
      const el = codeEl;
      const lang = this.getCodeBlockLanguage(el);
      if (!lang || !this.isSupportedLanguage(lang))
        return;
      const { header, outputPre, copyBtn } = this.createCodeBlockUI(lang);
      const runBtn = header.querySelector(".run-btn");
      const saveBtn = header.querySelector(".save-btn");
      const wrapper = document.createElement("div");
      wrapper.className = "dlv-codeblock";
      wrapper.append(
        header,
        el.parentElement.cloneNode(true),
        outputPre
      );
      runBtn.onclick = async () => {
        const result = await this.executeDlv(el.textContent || "", lang);
        this.updateOutputUI(outputPre, copyBtn, result);
      };
      saveBtn.onclick = async () => {
        const result = await this.executeDlv(el.textContent || "", lang);
        await this.saveExecutionResult(result);
      };
      copyBtn.onclick = () => this.copyToClipboard(outputPre.textContent || "");
      (_a = el.parentElement) == null ? void 0 : _a.replaceWith(wrapper);
    });
  }
  getCodeBlockLanguage(element) {
    const langClass = Array.from(element.classList).find((c) => c.startsWith("language-"));
    return langClass == null ? void 0 : langClass.replace("language-", "");
  }
  isSupportedLanguage(lang) {
    return this.settings.customExtensions.split(",").map((e) => e.trim().toLowerCase()).some((e) => lang.toLowerCase() === e || lang.toLowerCase().startsWith(e + "."));
  }
  isSupportedExtension(ext) {
    return this.isSupportedLanguage(ext);
  }
  getEditorDecoration() {
    return import_view.EditorView.decorations.compute(["doc"], (state) => {
      const builder = new import_state.RangeSetBuilder();
      const text = state.doc.toString();
      const regex = /```(\S+)\n([\s\S]*?)```/g;
      let match;
      while ((match = regex.exec(text)) !== null) {
        const lang = match[1].toLowerCase();
        if (this.isSupportedLanguage(lang)) {
          const start = match.index + match[0].indexOf(match[2]);
          const end = start + match[2].length;
          builder.add(end, end, import_view.Decoration.widget({
            widget: new CodeBlockWidget(this, lang, start, end, text),
            side: 1
          }));
        }
      }
      return builder.finish();
    });
  }
  async initializePluginPath() {
    try {
      const vaultPath = this.app.vault.adapter.basePath;
      if (this.manifest.dir != null) {
        this.pluginPath = path.join(
          vaultPath,
          this.manifest.dir
        );
      }
      console.log("Percorso corretto del plugin:", this.pluginPath);
      await import_fs.promises.mkdir(this.pluginPath, { recursive: true });
    } catch (error) {
      console.error("Errore inizializzazione plugin:", error);
      throw new Error("Configurazione plugin non valida");
    }
  }
  async refreshExecutablesList() {
    if (this.settings.dlvLocationType === "relative") {
      const executablesPath = path.join(this.pluginPath, "executables");
      console.log("Percorso eseguibili:", executablesPath);
      try {
        const files = await import_fs.promises.readdir(executablesPath);
        this.settings.availableExecutables = files.filter((f) => f.toLowerCase().includes("dlv")).map((f) => path.join("executables", f));
        console.log("Eseguibili trovati:", this.settings.availableExecutables);
      } catch (error) {
        console.error("Errore scansione eseguibili:", error);
      }
    }
  }
  isValidExecutable(filename) {
    if (process.platform === "win32") {
      return filename.toLowerCase().endsWith(".exe");
    }
    return /^dlv[-_]?(linux|mac|.*)/i.test(filename);
  }
  getDlvPath() {
    if (this.settings.dlvLocationType === "absolute") {
      return this.settings.absolutePath;
    }
    return path.join(
      this.pluginPath,
      this.settings.relativeExecutable
    );
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    await this.refreshExecutablesList();
  }
  async saveSettings() {
    if (this.settings.dlvLocationType === "relative") {
      const fullPath = path.join(this.pluginPath, this.settings.relativeExecutable);
      if (!await import_fs.promises.access(fullPath).then(() => true).catch(() => false)) {
        new import_obsidian.Notice("\u26A0\uFE0F Eseguibile non trovato nel percorso relativo!");
        return;
      }
    } else {
      if (!await import_fs.promises.access(this.settings.absolutePath).then(() => true).catch(() => false)) {
        new import_obsidian.Notice("\u26A0\uFE0F Percorso assoluto non valido!");
        return;
      }
    }
    await this.saveData(this.settings);
  }
  onunload() {
    var _a;
    (_a = this.stylesEl) == null ? void 0 : _a.remove();
  }
};
var DlvSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "DLV Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Installation Type").setDesc("Select DLV executable location type").addDropdown((dropdown) => {
      this.typeDropdown = dropdown.addOption("absolute", "Absolute Path").addOption("relative", "Relative to Plugin").setValue(this.plugin.settings.dlvLocationType).onChange(async (value) => {
        this.plugin.settings.dlvLocationType = value;
        await this.plugin.refreshExecutablesList();
        this.updateSettingsVisibility();
        await this.plugin.saveSettings();
      });
    });
    this.absoluteSetting = new import_obsidian.Setting(containerEl).setName("Absolute Path").setDesc("Full path to DLV executable (e.g. C:/dlv/dlv.exe)").addText((text) => text.setValue(this.plugin.settings.absolutePath).onChange(async (value) => {
      this.plugin.settings.absolutePath = value;
      await this.plugin.saveSettings();
    }));
    this.relativeSetting = new import_obsidian.Setting(containerEl).setName("Plugin Executable").setDesc("Select executable from plugin folder").addDropdown((dropdown) => {
      this.plugin.settings.availableExecutables.forEach((exe) => {
        dropdown.addOption(exe, exe.split("/").pop() || exe);
      });
      dropdown.setValue(this.plugin.settings.relativeExecutable).onChange(async (value) => {
        this.plugin.settings.relativeExecutable = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Supported File Extensions").setDesc("Comma-separated list (e.g. asp,dlv,prolog)").addText((text) => text.setValue(this.plugin.settings.customExtensions).onChange(async (value) => {
      this.plugin.settings.customExtensions = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show All Models").setDesc("Enable -n 0 flag to show all answer sets").addToggle((toggle) => toggle.setValue(this.plugin.settings.showAllModels).onChange(async (value) => {
      this.plugin.settings.showAllModels = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Hide Facts").setDesc("Enable --no-facts flag to hide facts").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideFacts).onChange(async (value) => {
      this.plugin.settings.hideFacts = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Error Handling").setDesc("Show error messages in output").addToggle((toggle) => toggle.setValue(this.plugin.settings.showErrors).onChange(async (value) => {
      this.plugin.settings.showErrors = value;
      await this.plugin.saveSettings();
    }));
    this.updateSettingsVisibility();
  }
  updateSettingsVisibility() {
    const isAbsolute = this.plugin.settings.dlvLocationType === "absolute";
    this.absoluteSetting.settingEl.style.display = isAbsolute ? "" : "none";
    this.relativeSetting.settingEl.style.display = isAbsolute ? "none" : "";
    const dropdown = this.relativeSetting.controlEl.querySelector("select");
    if (dropdown) {
      dropdown.innerHTML = this.plugin.settings.availableExecutables.map((exe) => `<option value="${exe}">${path.basename(exe)}</option>`).join("");
    }
    const basePath = path.join(this.plugin.pluginPath, "executables");
    const fileList = this.plugin.settings.availableExecutables.map((exe) => `\u2022 ${path.basename(exe)}`).join("\n");
    this.relativeSetting.descEl.innerHTML = `
            Percorso scannerizzato: <code>${basePath}</code><br>
            File trovati: ${this.plugin.settings.availableExecutables.length}
            <pre style="margin-top:5px">${fileList || "Nessun file valido trovato"}</pre>
        `;
  }
};
//# sourceMappingURL=data:application/json;base64,
